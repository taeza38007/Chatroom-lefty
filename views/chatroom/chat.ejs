<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Socket.IO</title>
        <style>
            body { margin: 0; padding-bottom: 3rem; font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif; }

            #form { background: rgba(0, 0, 0, 0.15); padding: 0.25rem; position: fixed; bottom: 0; left: 0; right: 0; display: flex; height: 3rem; box-sizing: border-box; backdrop-filter: blur(10px); }
            #input { border: none; padding: 0 1rem; flex-grow: 1; border-radius: 2rem; margin: 0.25rem; }
            #input:focus { outline: none; }
            #form > button { background: #333; border: none; padding: 0 1rem; margin: 0.25rem; border-radius: 3px; outline: none; color: #fff; }

            #messages { list-style-type: none; margin: 0; padding: 0; }
            #messages > li { padding: 0.5rem 1rem; }
            #messages > li:nth-child(odd) { background: #efefef; }
        </style>
        <script src="/socket.io/socket.io.js"></script>
    

    </head>
    <body>

            <h1 id="userCount"></h1>
            <h2 id="test"></h2>
        </div>
        <ul id="messages"></ul>
        
        <form action="" id="form">
            <!-- <div> -->
                <!-- <input type="text" name="name" id="name" value="" placeholder="Enter your name 😏"> -->
                <!-- <button type="button" name="button">Let me chat!</button> -->
                <!-- <button type="button" name="button" onclick="setUsername()">Let me chat!</button> -->

            <!-- </div> -->
            <input autocomplete="off" id="input"><button>Send</button>
        </form>
        <script>

            const foot = document.querySelector('#footer');
            
            console.log(foot);
            // foot.textContent = 'testy';
            // foot.setAttribute("hidden", "hidden");

            const socket = io();
            console.log('test');

            const form = document.querySelector('#form');
            const input = document.querySelector('#input');
            const messages = document.querySelector('#messages');
            const userCount = document.querySelector('#userCount');
            const test = document.querySelector('#test');

            form.addEventListener('submit', (e) => {
                e.preventDefault();
                if (input.value){
                    socket.emit('chat message', input.value);
                    input.value = '';
                }
            });

            const namee = document.getElementById('name');
            console.log(typeof namee);

            function setUsername(){ 
                socket.emit('setUsername', document.getElementById('name').value);
                console.log('herererere');
                console.log(document.getElementById('name').value);
            };

            // const setUsername = () => {
            //     const name = document.getElementByName('name');
            //     console.log(name);
            //     socket.emit('setUsername', document.getElementByName('name'));
            // };
            // let user;
            // socket.on('userExists', (data) => {
            //     document.getElementById('error-container').innerHTML = data;
            // });
            // socket.on('userSet', (data) => {
            //     user = data.username;
            //     document.body.innerHTML = '<input type="text" id="message">\
            // <button type="button" name="button" onclick="sendMessage()">Send</button>\
            // <div id="message-container"></div>';
            // });

            const sendMessage = () => {
                let msg = document.getElementById('message').value;
                if (msg){
                    socket.emit('msg', {message: msg, user: user});
                }
            }
        


            // socket.emit('clientEvent', 'a message from client side');
            
            // socket.on('broadcast', (data) => {
                // let item = document.createElement('li');
            //     item.textContent = data; 
            //     messages.appendChild(data.welcome);
            //     window.scrollTo(0, document.body.scrollHeight);
            // })
            
            // var sk = io('/my-namespace');
            // sk.on('hi',function(data){
            //     document.body.innerHTML = '';
            //     document.write(data);
            // });


            socket.on('newclientconnect', (data) => {
                let userCount = document.querySelector('#userCount');
                userCount.innerHTML = data.say;
                // setTimeout(() => {
                //     userCount.innerHTML = data.say;
                //     console.log('here');
                // }, 3000);
            });

            // socket.on('broadcast',data => {
            //     let userCount = document.querySelector('#userCount');
            
            //     userCount.innerHTML =  data.description;
            //     console.log(typeof data.description);
            //     console.log(data.description);

            //     // setTimeout(() => {
            //     //     // userCount.innerHTML = ''
                    

            //     //     console.log('here');
            //     // }, 1500);
            // });

            socket.on('yoEvent', (words) => {
                let item = document.createElement('li');
                item.innerHTML = words.yup;
                console.log(item);
                messages.appendChild(item);

            });

            // socket.on('broadcast',function(data){
            //     let item = document.createElement('li');
            //     // welcome.textContent = data.welcome;
            //     item.textContent = data.description;
            //     // messages.appendChild(welcome);
            //     messages.appendChild(item);
            //     window.scrollTo(0, document.body.scrollHeight);
            // });

            // socket.on('message', (data) => {
            //     let item = document.createElement('li');
            //     console.log(data);
            //     console.log(typeof data);
            //     item.innerHTML = data;
            //     messages.appendChild(item);
            //     window.scrollTo(0, document.body.scrollHeight);
            // });

            socket.on('chat message', (msg, id, clients) => {

                let item = document.createElement('li');
                // id = `user`;
                item.textContent = `${id}: `;
                messages.appendChild(item);
                item.textContent += `${msg}`;
                messages.appendChild(item);
                // messages.appendChild(document.createElement(' \n'));
                
                window.scrollTo(0, document.body.scrollHeight);
            });

        </script>
    
</body>
</html>















